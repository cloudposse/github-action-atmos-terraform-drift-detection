name: 'GitHub Action Atmos Terraform Drift Detection'
description: 'GitHub Action Atmos Terraform Drift Detection'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  action:
    description: "Drift detection action. One of ['triage','create-gh-issue','update-gh-issue']"
    required: true
  issue-labels:
    description: "Comma separated list of labels to add to the drift issues. Default: drift"
    default: 'drift'
    required: false
  max-opened-issues:
    description: "Number of open drift detection issues. Default: 10"
    default: '10'
    required: false
  issue-number:
    description: "Issue number"
    required: false
  issue-title:
    description: "Issue title"
    required: false
  issue-description:
    description: "Issue description"
    required: false
  component:
    description: "The name of the component to plan."
    required: false
  stack:
    description: "The stack name for the given component."
    required: false
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: false
  assignee-users:
    description: "Comma-separated list of users to assign issues to. This is used only for action 'create-gh-issue'"
    required: false
    default: ""
  assignee-teams:
    description: "Comma-separated list of teams to assign issues to. This is used only for action 'create-gh-issue'"
    required: false
    default: ""
  debug:
    description: "Enable action debug mode. Default: false"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  components-with-issues:
    description: A matrix for components that have issues
    value: ${{ steps.lookup-issues.outputs.components-with-issues }}
  components-without-issues:
    description: A matrix for components that do not have issues
    value: ${{ steps.lookup-issues.outputs.components-without-issues }}

runs:
  using: "composite"
  steps:
    - name: Define Job Control State Variables
      shell: bash
      run: |
        echo "DEBUG_ENABLED=${{ inputs.debug }}" >> $GITHUB_ENV
        echo "ACTION=${{ inputs.action }}" >> $GITHUB_ENV

    - name: Download Artifacts
      if: env.ACTION == 'triage'
      uses: actions/download-artifact@v3
      with:
        name: metadata

    - name: Get Drift Detection Issues
      if: env.ACTION == 'triage'
      id: drift-detection-issues
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const repository = context.repo;

          let per_page = 100; // Max allowed value
          let page = 1;
          let issueTitleToNumberMap = {};
          let isContinue = true;

          while (isContinue) {
            const response = await github.rest.issues.listForRepo({
              ...repository,
              state: 'open',
              per_page,
              page
            });
            
            if (response.data.length === 0) {
              isContinue = false;
            } else {
              const driftDetectionIssues = response.data
                .filter(issue => issue.title.startsWith('Drift Detected in'));
              
              for (let issue of driftDetectionIssues) {
                issueTitleToNumberMap[issue.title] = issue.number;
              }

              page++;
            }
          }

          const issuesSerialized = JSON.stringify(issueTitleToNumberMap);

          console.log(`Found Issues: ${issuesSerialized}`);

          core.setOutput("issues", issuesSerialized);

    - name: Lookup Issues
      if: env.ACTION == 'triage'
      id: lookup-issues
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const path = require('path');

          const maxIssues = parseInt(`${{ inputs.max-opened-issues }}`);
          const issuesMap = JSON.parse('${{ steps.drift-detection-issues.outputs.issues }}', 'utf8');
          const dirPath = '.';
          const files = fs.readdirSync(dirPath);
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";

          const normalizedSlugs = [...new Set(files
            .filter(file => file.endsWith('.metadata.json'))
            .map(file => file.replace('.metadata.json', '')))];

          const componentsWithIssues = { include: [] };
          const componentsWithoutIssues = { include: [] };

          let numDriftDetectionIssues = Object.keys(issuesMap).length;

          for (let i = 0; i < normalizedSlugs.length; i++) {
            const normalizedSlug = normalizedSlugs[i];
            const metadata = JSON.parse(fs.readFileSync(path.join(dirPath, normalizedSlug + '.metadata.json'), 'utf8'));
            const stack = metadata.stack;
            const component = metadata.component;
            const stackSlug = `${stack}-${component}`
            const componentPath = metadata.componentPath;
            const issueTitle = `Drift Detected in \`${stack}-${component}\``;
            const issueDescription = Buffer.from(fs.readFileSync(path.join(dirPath, normalizedSlug + '.md'))).toString('base64');
            const matrixComponent = {
              component: component,
              stack: stack,
              componentPath: componentPath,
              stackSlug: stackSlug,
              issueTitle: issueTitle,
              issueDescription: issueDescription,
              issueNumber: -1
            }

            if (issuesMap.hasOwnProperty(issueTitle)) {
              matrixComponent.issueNumber = issuesMap[issueTitle];
              componentsWithIssues.include.push(matrixComponent);
            } else {
              if (numDriftDetectionIssues >= maxIssues) {
                console.log(`Reached maximum of open drift detection issues. Skipping issue creation for ${issueTitle}`);
              } else {
                numDriftDetectionIssues++;
                componentsWithoutIssues.include.push(matrixComponent);
              }
            }
          }

          const componentsWithIssuesSerialized = JSON.stringify(componentsWithIssues);
          const componentsWithoutIssuesSerialized = JSON.stringify(componentsWithoutIssues);

          console.log(`components-with-issues: ${componentsWithIssuesSerialized}`);
          console.log(`components-without-issues: ${componentsWithoutIssuesSerialized}`);

          core.setOutput('components-with-issues', componentsWithIssuesSerialized);
          core.setOutput('components-without-issues', componentsWithoutIssuesSerialized);

    - name: Create Issue
      id: create-issue
      uses: actions/github-script@v6
      if: env.ACTION == 'create-gh-issue'
      with:
        github-token: ${{ inputs.token }}
        script: |
          const repository = context.repo;
          const issueTitle = "${{ inputs.issue-title }}";
          const issueDescriptionEncoded = "${{ inputs.issue-description }}";
          const issueDescription = Buffer.from(issueDescriptionEncoded, 'base64').toString('utf8');
          const issueLabels = "${{ inputs.issue-labels }}"
          const labels = issueLabels.split(",").map(item => item.trim()).filter(item => item != null && item !== "");

          const newIssue = await github.rest.issues.create({
              ...repository,
            title: issueTitle,
            body: issueDescription,
            labels: labels
          });

          const issueNumber = newIssue.data.number;

          console.log(`Created new issue with number: ${issueNumber}`);

          core.setOutput('issue-number', issueNumber);

    - name: Assign Issue to User and/or Teams
      uses: actions/github-script@v6
      if: env.ACTION == 'create-gh-issue'
      with:
        github-token: ${{ inputs.token }}
        script: |
          const assigneeTeams = "${{ inputs.assignee-teams }}";
          const assigneeUsers = "${{ inputs.assignee-users }}";

          function csvToArray(csvString) {
            return csvString
                .split(',')
                .map((item) => item.trim())
                .filter((item) => item !== '');
          }

          let teams = csvToArray(assigneeTeams);
          let users = csvToArray(assigneeUsers);

          if (teams.length === 0 && users.length === 0) {
            console.log("No users to assign issue with. Skipping ...");
            return;
          }


    - name: Update Issue
      if: env.ACTION == 'update-gh-issue'
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const repository = context.repo;
          const issueNumber = parseInt("${{ inputs.issue-number }}", 10);
          const issueDescriptionEncoded = "${{ inputs.issue-description }}";
          const issueDescription = Buffer.from(issueDescriptionEncoded, 'base64').toString('utf8');

          console.log(`Found issue: ${issueNumber}`);

          await github.rest.issues.update({
              ...repository,
            issue_number: issueNumber,
            body: issueDescription
          });

          console.log(`Updated issue: ${issueNumber}`);
