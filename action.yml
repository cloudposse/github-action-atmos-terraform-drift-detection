name: 'GitHub Action Atmos Terraform Drift Detection'
description: 'GitHub Action Atmos Terraform Drift Detection'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  mode:
    description: "Drift detection mode. One of ['triage','create_issue','update_issue']"
    required: true
  issue-labels:
    description: "Comma separated list of labels to add to the drift issues. Default: drift"
    default: 'drift'
    required: false
  max-new-issues-to-create:
    description: "Number of new issues to create at once. Default: 10"
    default: '10'
    required: false
  component:
    description: "The name of the component to plan."
    required: false
  stack:
    description: "The stack name for the given component."
    required: false
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: false
  terraform-plan-role:
    description: "The AWS role to be used to plan Terraform."
    required: false
  terraform-state-role:
    description: "The AWS role to be used to retrieve the planfile from AWS."
    required: false
  terraform-state-bucket:
    description: "The S3 Bucket where the planfiles are stored."
    required: false
  terraform-state-table:
    description: "The DynamoDB table where planfile metadata is stored."
    required: true
  aws-region:
    description: "AWS region for assuming identity."
    required: false
    default: "us-east-1"
  atmos-version:
    description: "Atmos version to use for vendoring. Default 'latest'"
    required: false
    default: 'latest'
  atmos-config-path:
    description: "The path to the atmos.yaml file"
    required: false
    default: atmos.yaml
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  debug:
    description: "Enable action debug mode. Default: false"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  components_with_issues:
    description: A matrix for components that have issues
    value: ${{ steps.lookup-issues.outputs.components_with_issues }}
  components_without_issues:
    description: A matrix for components that do not have issues
    value: ${{ steps.lookup-issues.outputs.components_without_issues }}

runs:
  using: "composite"
  steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: plan-artifacts

    - name: Lookup Issues
      id: lookup-issues
      if: ${{ inputs.mode == 'triage' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const path = require('path');

          const dirPath = '.';
          const files = fs.readdirSync(dirPath);
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";

          const normalizedSlugs = [...new Set(files
            .filter(file => file.endsWith('.metadata.json'))
            .map(file => file.replace('.metadata.json', '')))];


    - name: Create Issue
      if: ${{ inputs.mode == 'create_issue' }}
      shell: bash
      run: |
        echo "${{ inputs.stack }}-${{ inputs.component }}"

    - name: Update Issue
      if: ${{ inputs.mode == 'update_issue' }}
      shell: bash
      run: |
        echo "${{ inputs.stack }}-${{ inputs.component }}"
