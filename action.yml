name: 'GitHub Action Atmos Terraform Drift Detection'
description: 'GitHub Action Atmos Terraform Drift Detection'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to plan."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: true
  sha:
    description: "Commit SHA that will be used as suffix for plan file"
    required: true
    default: ${{ github.sha }}
  terraform-plan-role:
    description: "The AWS role to be used to plan Terraform."
    required: true
  terraform-state-role:
    description: "The AWS role to be used to retrieve the planfile from AWS."
    required: true
  terraform-state-bucket:
    description: "The S3 Bucket where the planfiles are stored."
    required: true
  terraform-state-table:
    description: "The DynamoDB table where planfile metadata is stored."
    required: true
  aws-region:
    description: "AWS region for assuming identity."
    required: false
    default: "us-east-1"
  atmos-version:
    description: "Atmos version to use for vendoring. Default 'latest'"
    required: false
    default: 'latest'
  atmos-config-path:
    description: "The path to the folder where atmos.yaml file is located"
    required: false
    default: '.'
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  debug:
    description: "Enable action debug mode. Default: false"
    default: 'false'
    required: false
  create_issue:
    description: "Whether to create GitHub issue if drift detected. Default: true"
    default: 'true'
    required: false
  issue_labels:
    description: "Comma separated list of labels to add to the drift issues. Default: drift"
    default: 'drift'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}

runs:
  using: "composite"
  steps:
    - name: Plan Atmos Component
      id: atmos-plan
      uses: cloudposse/github-action-atmos-terraform-plan@added-outputs
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        sha: ${{ inputs.sha }}
        component-path: ${{ inputs.component-path }}
        terraform-plan-role: ${{ inputs.terraform-plan-role }}
        terraform-state-bucket: ${{ inputs.terraform-state-bucket }}
        terraform-state-role: ${{ inputs.terraform-state-role }}
        terraform-state-table: ${{ inputs.terraform-state-table }}
        aws-region: ${{ inputs.aws-region }}
        token: ${{ inputs.token }}
        atmos-version: ${{ inputs.atmos-version }}
        terraform-version: ${{ inputs.terraform-version }}
        debug: ${{ inputs.debug }}

    - name: Render Output
      if: ${{ inputs.create_issue == 'true' }}
      id: render-output
      shell: bash
      run: |
        cd ${{ inputs.component-path }}

        tfcmt \
          --config "${{ github.action_path }}/config/atmos_github_issue.yaml" \
          -owner "${{ github.repository_owner }}" \
          -repo "${{ github.event.repository.name }}" \
          -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
          -var "component:${{ inputs.component }}" \
          -var "componentPath:${{ inputs.component-path }}" \
          -var "planFile:${{ steps.atmos-plan.outputs.plan-file }}" \
          -var "stack:${{ inputs.stack }}" \
          -var "job:${{ github.job }}" \
          --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
          --output ${{ github.action_path }}/output.md \
          plan -- terraform show ${{ steps.atmos-plan.outputs.plan-file-path }}/${{ steps.atmos-plan.outputs.plan-file }}

    - name: Lookup Issue by Title
      id: lookup-issue
      if: ${{ inputs.create_issue == 'true' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');

          const title = "Drift Detected in `${{ inputs.stack }}-${{ inputs.component }}`";
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";
          const issues = await github.rest.search.issuesAndPullRequests({
            q: `repo:${owner}/${repo} is:issue state:open in:title ${title}`
          });

          let issueNumber = -1

          if (issues.data.total_count > 0) {
            issueNumber = issues.data.items[0].number;
            console.log(`Found issue: ${issueNumber}`);

            const issue = await github.rest.issues.get({
              owner: owner,
              repo: repo,
              issue_number: issueNumber,
            });

            fs.writeFileSync("${{ github.action_path }}/current.md", issue.data.body);
          } else {
            console.log("Issue not found.");
          }

          core.setOutput('issue_number', issueNumber);

    - name: Create Issue
      id: create_issue
      uses: actions/github-script@v6
      if: ${{ inputs.create_issue == 'true' && steps.lookup-issue.outputs.issue_number == '-1' }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');

          const title = "Drift Detected in `${{ inputs.stack }}-${{ inputs.component }}`";
          const body = fs.readFileSync("${{ github.action_path }}/output.md", 'utf8');
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";
          const issue_labels = "${{ inputs.issue_labels }}"
          const labels = issue_labels.split(",").map(item => item.trim()).filter(item => item != null && item !== "") : [];
          const newIssue = await github.rest.issues.create({
            owner: owner,
            repo: repo,
            title: title,
            body: body,
            labels: labels
          });
          const issueNumber = newIssue.data.number;

          console.log(`Created new issue with number: ${issueNumber}`);

    - name: Calculate Issue Description Hash
      id: issue_description_hash
      if: ${{ inputs.create_issue == 'true' && steps.lookup-issue.outputs.issue_number != '-1' }}
      shell: bash
      run: |
          current_hash=$(cat "${{ github.action_path }}/current.md" | sha256sum)
          new_hash=$(cat "${{ github.action_path }}/output.md" | sha256sum)

          echo "Hashes: $current_hash vs $new_hash"

          echo "current_hash=$current_hash" >> $GITHUB_OUTPUT
          echo "new_hash=$new_hash" >> $GITHUB_OUTPUT

    - name: Update Issue
      id: update_issue
      uses: actions/github-script@v6
      if: ${{ inputs.create_issue == 'true' && steps.lookup-issue.outputs.issue_number != '-1' && steps.issue_description_hash.outputs.current_hash != steps.issue_description_hash.outputs.new_hash }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');

          let issueNumber = '${{steps.lookup-issue.outputs.issue_number}}';
          const title = "Drift Detected in `${{ inputs.stack }}-${{ inputs.component }}`";
          const body = fs.readFileSync("${{ github.action_path }}/output.md", 'utf8');
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";

          await github.rest.issues.update({
            owner: owner,
            repo: repo,
            issue_number: issueNumber,
            body: body
          });

          console.log(`Updated issue: ${issueNumber}`);