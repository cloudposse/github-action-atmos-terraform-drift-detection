name: 'GitHub Action Atmos Terraform Drift Detection'
description: 'GitHub Action Atmos Terraform Drift Detection'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  mode:
    description: "Drift detection mode. One of ['triage','create-gh-issue','update-gh-issue']"
    required: true
  issue-labels:
    description: "Comma separated list of labels to add to the drift issues. Default: drift"
    default: 'drift'
    required: false
  max-new-issues-to-create:
    description: "Number of new issues to create at once. Default: 10"
    default: '10'
    required: false
  issue-number:
    description: "Issue number"
    required: false
  issue-title:
    description: "Issue title"
    required: false
  issue-description:
    description: "Issue description"
    required: false
  component:
    description: "The name of the component to plan."
    required: false
  stack:
    description: "The stack name for the given component."
    required: false
  component-path:
    description: "The path to the base component. Atmos defines this value as component_path."
    required: false
  debug:
    description: "Enable action debug mode. Default: false"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  components-with-issues:
    description: A matrix for components that have issues
    value: ${{ steps.lookup-issues.outputs.components-with-issues }}
  components-without-issues:
    description: A matrix for components that do not have issues
    value: ${{ steps.lookup-issues.outputs.components-without-issues }}

runs:
  using: "composite"
  steps:
    - name: Define Job Control State Variables
      shell: bash
      run: |
        echo "DEBUG_ENABLED=${{ inputs.debug }}" >> $GITHUB_ENV
        echo "EXECUTION_MODE=${{ inputs.mode }}" >> $GITHUB_ENV

    - name: Download Artifacts
      if: env.EXECUTION_MODE == 'triage'
      uses: actions/download-artifact@v3
      with:
        name: plan-artifacts

    - name: Lookup Issues
      if: env.EXECUTION_MODE == 'triage'
      id: lookup-issues
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const path = require('path');

          const dirPath = '.';
          const files = fs.readdirSync(dirPath);
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";

          const normalizedSlugs = [...new Set(files
            .filter(file => file.endsWith('.metadata.json'))
            .map(file => file.replace('.metadata.json', '')))];

          const componentsWithIssues = { include: [] };
          const componentsWithoutIssues = { include: [] };

          for (let i = 0; i < normalizedSlugs.length; i++) {
            const normalizedSlug = normalizedSlugs[i];
            const metadata = JSON.parse(fs.readFileSync(path.join(dirPath, normalizedSlug + '.metadata.json'), 'utf8'));
            const issueTitle = `Drift Detected in \`${stack}-${component}\``;
            const issueDescription = fs.readFileSync(path.join(dirPath, normalizedSlug + '.md'));
            const stack = metadata.stack;
            const component = metadata.component;
            const stackSlug = `${stack}-${component}`
            const componentPath = metadata.componentPath;
            const matrixComponent = {
              component: component,
              stack: stack,
              componentPath: componentPath,
              stackSlug: stackSlug,
              issueTitle: issueTitle,
              issueDescription: issueDescription,
              issueNumber: -1
            }

            const issues = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue state:open in:title ${issueTitle}`
            });

            if (issues.data.total_count > 0) {
              matrixComponent.issueNumber = issues.data.items[0].number
              componentsWithIssues.include.push(matrixComponent);
            } else {
              componentsWithoutIssues.include.push(matrixComponent);
            }
          }

          core.setOutput('components-with-issues', JSON.stringify(componentsWithIssues));
          core.setOutput('components-without-issues', JSON.stringify(componentsWithoutIssues));

    - name: Create Issue
      uses: actions/github-script@v6
      if: env.EXECUTION_MODE == 'create-gh-issue'
      with:
        github-token: ${{ inputs.token }}
        script: |
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";
          const issueTitle = ${{ inputs.issue-title }};
          const issueDescription = ${{ inputs.issue-description }};
          const issueLabels = "${{ inputs.issue-labels }}"
          const labels = issueLabels.split(",").map(item => item.trim()).filter(item => item != null && item !== "");

          const newIssue = await github.rest.issues.create({
            owner: owner,
            repo: repo,
            title: issueTitle,
            body: issueDescription,
            labels: labels
          });

          const issueNumber = newIssue.data.number;

          console.log(`Created new issue with number: ${issueNumber}`);

    - name: Update Issue
      if: env.EXECUTION_MODE == 'update-gh-issue'
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const owner = "${{ github.repository_owner }}";
          const repo = "${{ github.event.repository.name }}";
          const issueNumber = parseInt("${{ inputs.issue-number }}", 10);
          const issueDescription = ${{ inputs.issue-description }};

          console.log(`Found issue: ${issueNumber}`);

          await github.rest.issues.update({
            owner: owner,
            repo: repo,
            issue_number: issueNumber,
            body: issueDescription
          });

          console.log(`Updated issue: ${issueNumber}`);

    - name: Fail
      if: env.EXECUTION_MODE != 'triage'
      shell: bash
      run: |
        # failing intentionally
        # need for debugging
        exit 1
